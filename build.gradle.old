import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'net.darkhax.curseforgegradle' version '1.1.15' apply false
    id 'com.modrinth.minotaur' version '2.8+'
}

version = "${minecraft_version}-${mod_version}"
group = mod_group_id

base {
    archivesName = mod_filename
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: minecraft_version

    enableIdeaPrepareRuns = true
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', 'storagedrawers'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'storagedrawers'
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'storagedrawers'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

apply from: 'repositories.gradle'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    implementation fg.deobf("curse.maven:jei-238222:${jei_id}")
    // JEI not yet updated for 41.0.64
    // runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("curse.maven:the-one-probe-245211:${top_id}")
    //implementation fg.deobf("mcjty.theoneprobe:theoneprobe:1.19.3-7.0.0-2")
    // compileOnly since not yet updated for 41.0.64
    implementation fg.deobf("curse.maven:jade-324717:${jade_id}")
    implementation fg.deobf("curse.maven:emi-580555:${emi_id}")

    implementation fg.deobf("curse.maven:cofh-core-69162:${cofhcore_id}")

    implementation fg.deobf("curse.maven:fluid-drawers-legacy-597669:${fluiddrawers_id}")

    //implementation fg.deobf("curse.maven:chemlib-340666:5128632")
    //implementation fg.deobf("curse.maven:alchemylib-293426:5037781")
    //implementation fg.deobf("curse.maven:alchemistry-293425:4770614")

//    implementation fg.deobf("curse.maven:spark-361579:3670050")

    //deobfCompile "MineTweaker3:MineTweaker3-API:${mt_version}"
    //deobfCompile "org.ow2.asm:asm-debug-all:5.0.3"

    //compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${crafttweaker_version}")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

task srcJar(type: Jar) {
    archiveClassifier.set("src")
    from sourceSets.main.allJava
}

task apiJar(type: Jar) {
    archiveClassifier.set("api")
    from(sourceSets.main.output) {
        include 'com/jaquadro/minecraft/storagedrawers/api/**'
    }
}

artifacts {
    archives srcJar
    archives apiJar
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

def final modrinthApiKey = providers.environmentVariable('MODRINTH_API_KEY')
def final cfApiKey = providers.environmentVariable('CURSEFORGE_API_KEY')

static def splitList(list) {
    def split = list.split(', ')
    assert split.length == list.count(',') + 1
    return split
}

def getReleaseType() {
    String type = project.dist_releaseType
    if (!(type in ['release', 'beta', 'alpha'])) {
        throw new Exception("Release type invalid! Found \"" + type + "\", allowed: \"release\", \"beta\", \"alpha\"")
    }
    return type
}

if (cfApiKey.isPresent()) {
    tasks.register('curseForge', TaskPublishCurseForge) {
        dependsOn('build')
        group = 'publishing'
        description = 'Publish to CurseForge'

        disableVersionDetection()
        apiToken = cfApiKey.getOrElse('debug_token')

        def mainArtifact = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        def mainFile = upload(curseForgeProjectId, mainArtifact)

        mainFile.displayName = "${mod_filename}-${minecraft_version}-${mod_version}"
        mainFile.releaseType = getReleaseType()
        mainFile.changelog = rootProject.file('CHANGELOG.last.md').text
        mainFile.addModLoader(splitList(dist_modLoaders))
        mainFile.addGameVersion(splitList(dist_gameVersions))

        if (project.hasProperty('curseforgeRequiredDeps')) {
            mainFile.addRequirement(splitList("${curseforgeRequiredDeps}"))
        }
        if (project.hasProperty('curseforgeOptionalDeps')) {
            mainFile.addOptional(splitList("${curseforgeOptionalDeps}"))
        }

        mainFile.withAdditionalFile(srcJar)
        mainFile.withAdditionalFile(apiJar)
    }
}

tasks.modrinth {
    onlyIf {
        modrinthApiKey
    }
}

modrinth {
    token = modrinthApiKey.getOrElse('debug_token')
    projectId = modrinthProjectId
    versionType = getReleaseType()
    versionNumber = "${minecraft_version}-${mod_version}"
    versionName = "${mod_name} ${minecraft_version}-${mod_version}"
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    changelog = rootProject.file('CHANGELOG.last.md').text
    gameVersions = splitList(dist_gameVersions) as List
    loaders = (splitList(dist_modLoaders) as List).collect{ it.toLowerCase() }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
